{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MPCForces-Extractor","text":"<p>This is a simple tool for Optistruct Runs and can get the amount of Force which is transferred by a particular RBE Element:</p>"},{"location":"#functionality","title":"Functionality","text":"<ul> <li>Detect RBE2 and RBE3 elements in your model.</li> <li>Do a group segmentation for all connected (not by RBE2/RBE3) parts</li> <li>Ouput Sums of forces per RBE Element and therefore showing you how much force is being transfereed by which RBE Element</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Thanks to Codie, because without him my python skills would not be nearly as mediocre as they are ;)</li> <li>Thank you dear Wulu Tea for keeping me running at night</li> </ul>"},{"location":"quick_start/","title":"Quickstart","text":""},{"location":"quick_start/#cli","title":"CLI","text":"<p>To install this tool, you can simply use the pip install command like so:</p> <pre><code>pip install mpcforces-extractor\n</code></pre> <p>After installing it, you can access the cli tool via: <code>mpcforces-extractor</code> which will give you the following output:</p> <p></p>"},{"location":"quick_start/#command-mpcforces-extractor-extract","title":"Command: <code>mpcforces-extractor extract</code>","text":"<p>The main command is the <code>extract</code> command. This command will extract the mpc forces from the mpcf file and will output the summed up forces per connected part. The ouptput will be a text file with the summed up forces per connected part.</p> <p>Additionally the tcl code needed for visualizing the connected parts in HyperMesh will be generated. The tcl code will be saved in the same directory as the output file in the subfolder tcl-visualization.</p> <p>The command wants you to provide the path to the .fem model file as well as the path to the .mpcf file. Lastly, the output file path is needed. The blocksize is optional and is needed for reading the files. The default value is 8 (8 chars per field in line). For long ouptut it is recommended to increase the blocksize to 16 (not tested).</p>"},{"location":"quick_start/#command-mpcforces-extractor-visualize","title":"Command: <code>mpcforces-extractor visualize</code>","text":"<p>The command <code>visualize</code> visualizes the connected parts in HyperMesh. The command wants you to provide the path to the .fem model file as well as the path to the output directory. The tcl file is the output of the extract command. Know issue: If a compornent in the hypermesh model is named part1, part2, etc. the tcl script might not work as intended. This is due to the fact that the tcl script is using the part name to create the groups.</p>"},{"location":"quick_start/#taskfile","title":"Taskfile","text":"<p>The below described approach is for more development oriented people. If you are not interested in this, you can skip this section and use the CLI tool described above.</p> <p>The project has a Taskfile.yaml for your conveinience. Taskfile is an executeable file which you can download on: Taskfile and it makes your life easier.</p> <p>In the Taskfile you have commands available to start the program namely:</p> <pre><code>task run\n</code></pre> <p>which does the following:</p> <pre><code>poetry run python -m mpcforces_extractor.main\n</code></pre> <p>alternatively you can start the tool also with the <code>python -m</code>  command.</p>"},{"location":"source_code/","title":"Source Code","text":""},{"location":"source_code/#mpcforces_extractor.main.main","title":"<code>main()</code>","text":"<p>This is the main function that is used to test the MPCForceExtractor class Its there because of a entry point in the toml file</p> Source code in <code>mpcforces_extractor\\main.py</code> <pre><code>def main():\n    \"\"\"\n    This is the main function that is used to test the MPCForceExtractor class\n    Its there because of a entry point in the toml file\n    \"\"\"\n\n    input_folder = \"data/input\"\n    output_folder = \"data/output\"\n    model_name = \"m\"\n    # model_name = \"Flange\"\n    blocksize = 8\n\n    mpc_force_extractor = MPCForceExtractor(\n        input_folder + f\"/{model_name}.fem\",\n        input_folder + f\"/{model_name}.mpcf\",\n        output_folder + f\"/{model_name}\",\n    )\n\n    # Write Summary\n    mpc_force_extractor.build_fem_and_subcase_data(blocksize)\n    summary_writer = SummaryWriter(\n        mpc_force_extractor, mpc_force_extractor.output_folder\n    )\n    summary_writer.add_header()\n    summary_writer.add_mpc_lines()\n    summary_writer.write_lines()\n\n    # Visualize the connected parts\n    start_time = time.time()\n    output_vis = os.path.join(output_folder, model_name, \"tcl_visualization\")\n    visualizer = VisualizerConnectedParts(output_vis)\n    visualizer.output_tcl_lines_for_part_vis()\n\n    print(\"TCL visualization lines written to\", output_vis)\n    print(\"..took \", round(time.time() - start_time, 2), \"seconds\")\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}